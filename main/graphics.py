import sys, pygame

from game import GameOfLife

from pygame import Rect, QUIT, MOUSEBUTTONDOWN, MOUSEBUTTONUP, KEYDOWN, K_SPACE, K_t, K_p

class GameRendering:
    def __init__(self, board_size, cell_size, initial_state=[]):
        pygame.init()
        self.board_size = board_size
        self.cell_size = cell_size
        self.game = GameOfLife(self.board_size, self.cell_size, initial_state)

    def run(self):
        size = 1000, 1000
        black = 0, 0, 0
        white = 255, 255, 255

        font = pygame.font.Font(None, 64)
        playing_text = font.render('Playing..', True, black)
        not_playing_text = font.render('Paused..', True, black)

        screen = pygame.display.set_mode(size)

        playing = False
        toggle_fill_erase = True
        change_cells = False
        alpha = 0

        clock = pygame.time.Clock()

        while 1:
            for event in pygame.event.get():
                if event.type == QUIT:
                    self.game.print_state()
                    sys.exit()

                elif event.type == MOUSEBUTTONDOWN: change_cells = True

                elif event.type == MOUSEBUTTONUP: change_cells = False

                elif event.type == KEYDOWN and event.key == K_t:
                    toggle_fill_erase = not toggle_fill_erase
                elif event.type == KEYDOWN and event.key == K_SPACE:
                    playing = not playing
                    display_playing_text = playing
                    alpha = 250
                elif event.type == KEYDOWN and event.key == K_p:
                    self.game.print_state()


            screen.fill(white)

            if change_cells:
                coordinates = pygame.mouse.get_pos()
                self.set_cell(coordinates, toggle_fill_erase)

            # draw game
            for row in range(0, self.board_size, self.cell_size):
                pygame.draw.line(screen, black, (row, 0), (row, self.board_size))
            for col in range(0, self.board_size, self.cell_size):
                pygame.draw.line(screen, black, (0, col), (self.board_size, col))
            for cell in self.game.get_alive():
                left = cell[1]
                top = cell[0]
                pygame.draw.rect(screen, black, Rect(left, top, 10, 10))

            # draw text if needed
            if alpha > 0:
                alpha = max(0, alpha - 50)
                if display_playing_text:
                    txt = playing_text.copy()
                else:
                    txt = not_playing_text.copy()
                txt.fill((0, 0, 0, alpha), special_flags=pygame.BLEND_RGBA_MULT)
                screen.blit(txt, (50, 50))

            if playing:
                self.game.advance_time()
            pygame.display.flip()
            clock.tick(60)

    def set_cell(self, coordinates, state):
        self.game.set_cell(coordinates[1], coordinates[0], state)



# inputs = [
#     (260, 230), (260, 240), (260, 260), (260, 280), (260, 270), (260, 250), (260, 310), (260, 360), (260, 390),
#     (260, 440), (260, 420), (260, 410), (260, 400), (260, 430), (260, 470), (260, 480), (260, 490), (260, 500),
#     (260, 510), (260, 540), (260, 550), (260, 560), (260, 610), (260, 620),
#     (260, 630), (260, 640), (260, 650), (270, 230), (270, 280), (270, 310), (270, 360), (270, 390), (270, 440),
#     (270, 470), (270, 540), (270, 560), (270, 570), (270, 610), (280, 230), (280, 280), (280, 310), (280, 360),
#     (280, 390), (280, 440), (280, 470), (280, 540), (280, 580), (280, 610),
#     (300, 230), (300, 280), (300, 240), (300, 250), (300, 260), (300, 270), (300, 310), (300, 360), (300, 390),
#     (300, 440), (300, 470), (300, 540), (300, 580), (300, 610), (310, 230), (310, 310), (310, 320), (310, 330),
#     (310, 340), (310, 350), (310, 360), (310, 390), (310, 440), (310, 470),
#     (310, 510), (310, 500), (310, 490), (310, 480), (310, 540), (310, 560), (310, 570), (310, 550), (310, 610),
#     (310, 620), (310, 640), (310, 650), (310, 630), (320, 230), (320, 310), (320, 360), (320, 390), (320, 440),
#     (320, 470), (320, 540), (320, 570), (320, 610), (290, 230), (290, 280),
#     (290, 310), (290, 360), (290, 390), (290, 440), (290, 470), (290, 540), (290, 580), (290, 610), (330, 230),
#     (330, 310), (330, 360), (330, 390), (330, 440), (330, 470), (330, 540), (330, 580), (330, 610), (340, 230),
#     (340, 310), (340, 360), (340, 390), (340, 440), (340, 470), (340, 540),
#     (340, 580), (340, 610), (350, 230), (350, 310), (350, 360), (350, 390), (350, 440), (350, 470), (350, 540),
#     (350, 580), (350, 570), (350, 610), (360, 230), (360, 310), (360, 360), (360, 390), (360, 400), (360, 410),
#     (360, 420), (360, 430), (360, 440), (360, 470), (360, 490), (360, 480),
#     (360, 500), (360, 510), (360, 540), (360, 570), (360, 550), (360, 560), (360, 610), (360, 620), (360, 630),
#     (360, 640), (360, 650), (410, 230), (410, 270), (410, 310), (410, 360), (410, 390), (410, 470), (410, 540),
#     (410, 580), (410, 630), (420, 230), (420, 280), (420, 310), (420, 360),
#     (420, 390), (420, 470), (420, 540), (420, 590), (420, 600), (420, 630), (430, 230), (430, 280), (430, 310),
#     (430, 360), (430, 390), (430, 470), (430, 540), (430, 600), (430, 630), (440, 230), (440, 280), (440, 310),
#     (440, 360), (440, 390), (440, 470), (440, 540), (440, 600), (440, 630),
#     (450, 230), (450, 280), (450, 310), (450, 360), (450, 390), (450, 470), (450, 540), (450, 600), (450, 630),
#     (460, 230), (460, 280), (460, 270), (460, 260), (460, 250), (460, 240), (460, 310), (460, 360), (460, 390),
#     (460, 440), (460, 430), (460, 420), (460, 410), (460, 470), (460, 480),
#     (460, 490), (460, 500), (460, 510), (460, 540), (460, 600), (460, 590), (460, 580), (460, 570), (460, 560),
#     (460, 550), (460, 630), (460, 640), (460, 650), (460, 660), (470, 230), (470, 240), (470, 310), (470, 360),
#     (470, 390), (470, 440), (470, 410), (470, 470), (470, 540), (470, 550),
#     (470, 660), (480, 230), (480, 250), (480, 310), (480, 360), (480, 390), (480, 440), (480, 410), (480, 470),
#     (480, 540), (480, 560), (480, 660), (490, 230), (490, 260), (490, 310), (490, 360), (490, 390), (490, 440),
#     (490, 470), (490, 540), (490, 570), (490, 660), (500, 230), (500, 270),
#     (500, 310), (500, 360), (500, 390), (500, 440), (500, 470), (500, 540), (500, 580), (500, 660), (510, 230),
#     (510, 280), (510, 310), (510, 320), (510, 330), (510, 340), (510, 350), (510, 360), (510, 390), (510, 400),
#     (510, 410), (510, 420), (510, 430), (510, 440), (510, 470), (510, 480),
#     (510, 490), (510, 500), (510, 510), (510, 540), (510, 590), (510, 660), (510, 650), (510, 640), (510, 630),
#     (400, 240), (400, 250), (400, 260), (400, 270), (400, 320), (400, 310), (400, 360), (400, 330), (400, 340),
#     (400, 350), (400, 420), (400, 400), (400, 410), (400, 390), (400, 470),
#     (400, 480), (400, 490), (400, 500), (400, 510), (400, 540), (400, 230), (400, 550), (400, 560), (400, 570),
#     (400, 580), (400, 650), (400, 640), (400, 630), (400, 660)
# ]
rendering = GameRendering(1000, 10)
rendering.run()



